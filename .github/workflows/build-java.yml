name: Build and Push Java Application

on:
  push:
    branches:
      - main
    paths:
      - 'java-service/**'
      - '.github/workflows/build-java.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'java-service/**'
      - '.github/workflows/build-java.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/demo-service

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x ./java-service/gradlew
        working-directory: .

      - name: Build with Gradle
        run: ./gradlew build
        working-directory: java-service

      - name: Run tests
        run: ./gradlew test
        working-directory: java-service

      - name: Determine version with Shipkit
        id: version
        run: |
          cd java-service

          # Use Shipkit to determine the version
          ./gradlew -q printVersion > version.txt
          VERSION=$(cat version.txt | tr -d '\n')

          # If version is empty, read from version.properties
          if [ -z "$VERSION" ] || [ "$VERSION" == "unspecified" ]; then
            VERSION=$(grep "^version=" version.properties | cut -d'=' -f2)
          fi

          # For PR builds, add PR suffix
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            VERSION="$VERSION-pr${{ github.event.pull_request.number }}"
          fi

          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${VERSION}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.version.outputs.VERSION }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./java-service
          file: ./java-service/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.version.outputs.VERSION }}
            COMMIT_SHA=${{ github.sha }}
            BUILD_DATE=${{ steps.meta.outputs.created }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        if: github.event_name != 'pull_request'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
          format: cyclonedx-json
          output-file: sbom.json

      - name: Upload SBOM
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      pull-requests: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x ./java-service/gradlew

      - name: Check if release needed
        id: check_release
        run: |
          cd java-service
          OUTPUT=$(./gradlew -q checkReleaseNeeded)
          echo "$OUTPUT"
          if echo "$OUTPUT" | grep -q "RELEASE_NEEDED=true"; then
            echo "release_needed=true" >> $GITHUB_OUTPUT
          else
            echo "release_needed=false" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release with Shipkit
        if: steps.check_release.outputs.release_needed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd java-service
          ./gradlew githubRelease

      - name: Increment version for next release
        if: steps.check_release.outputs.release_needed == 'true'
        run: |
          cd java-service
          ./gradlew incrementVersion

          # Commit the version bump
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

          if [ -f version.properties ]; then
            git add version.properties
            NEW_VERSION=$(grep "^version=" version.properties | cut -d'=' -f2)
            git diff --staged --quiet || (git commit -m "chore: bump version to $NEW_VERSION [skip ci]" && git push)
          fi